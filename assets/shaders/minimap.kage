package main

const (
	Pi = 3.1415925359
)

var Time float
var MapSize vec2
var GoalPosition vec2
var PlayerPosition vec2
var PlayerSignal float
var AgentPosition vec2
var AgentSignal float

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	clr := vec3(0)
	// Height
	data := imageSrc0UnsafeAt(texCoord)
	h := data.x * 2.65
	clr = vec3(abs(0.25-h) * 2)

	origin, size := imageSrcRegionOnTexture()
	uv := (texCoord - origin) / size
	uv.xy = 1 - uv.xy // Reverse for visual (not the theme)
	uv = uv * MapSize
	// Agents
	const (
		posr    = 5
		signalr = 50
	)

	oclr := vec4(clr, 1)
	// Positions
	d := length(uv-PlayerPosition) - posr
	if d < 0 {
		oclr.rgb = vec3(1, 0, 0)
	}
	d = length(uv-GoalPosition) - posr
	if d < 0 {
		oclr.rgb = vec3(1, 0.9, 0)
	}
	/*d = length(uv-AgentPosition) - agentr
	if d < 0 {
		oclr.rgb = vec3(0, 0, 1)
	}*/
	// Signal waves
	sigr := abs(sin(Time*Pi) * signalr)
	d = length(uv-PlayerPosition) - sigr
	if step(2.5*PlayerSignal, abs(d)) == 0 {
		oclr = oclr/2 + vec4(1, 0, 0, 1)
	}
	d = length(uv-AgentPosition) - sigr
	if step(2.5*AgentSignal, abs(d)) == 0 {
		oclr = oclr/2 + vec4(0, 0, 1, 1)
	}

	return oclr
}
