package main

const (
	Pi        = 3.1415925359
	TwoPi     = 2 * Pi
	Sqrt2     = 1.41421568
	Precision = 0.0001
	// Lights
	MinShadow = 0. //.2
)

func hash(p vec2, seed float) float {
	return fract(sin(dot(p, vec2(12.9898, 4.1414)*seed)) * 43758.5453)
}

func noZeroSign(v float) float {
	return sign(sign(v) + 0.5)
}

func rotate2D(a float) mat2 {
	s := sin(a)
	c := cos(a)
	return mat2(c, -s, s, c)
}

// Rotation matrix around the X axis
func rotateX(a float) mat3 {
	c := cos(a)
	s := sin(a)
	return mat3(
		vec3(1., 0., 0.),
		vec3(0., c, -s),
		vec3(0., s, c),
	)
}

// Rotation matrix around the Y axis
func rotateY(a float) mat3 {
	c := cos(a)
	s := sin(a)
	return mat3(
		vec3(c, 0., s),
		vec3(0., 1., 0.),
		vec3(-s, 0., c),
	)
}

// Rotation matrix around the Z axis
func rotateZ(a float) mat3 {
	c := cos(a)
	s := sin(a)
	return mat3(
		vec3(c, -s, 0.),
		vec3(s, c, 0.),
		vec3(0., 0., 1.),
	)
}

func insideWorldBox(p vec3) bool {
	block := floor(p)
	oow := step(abs(block.x), MapSize.x/2)
	oow *= step(0, p.y)
	oow *= step(p.y, MapSize.y)
	oow *= step(abs(block.z), MapSize.z/2)

	return oow > 0
}

func texture(p, normal vec3, id vec2) vec3 {
	id = floor(id * 255 + 0.5)

	origin, size := imageSrcRegionOnTexture()
	ip := floor(p)
	aip := abs(ip)
	xoff := floor(hash(ip.xz, 1) * 3.99)
	// Texture offset
	v := vec2(xoff, id.x)
	// Mod rule
	if id.y == 1 {
		v.y += float(int(aip.x+aip.y+aip.z) % 2)
	}
	p = fract(p)
	x := imageSrc1UnsafeAt(origin + (v+p.yz)/4*size).rgb
	y := imageSrc1UnsafeAt(origin + (v+p.xz)/4*size).rgb
	z := imageSrc1UnsafeAt(origin + (v+p.xy)/4*size).rgb
	// Blend
	m := abs(normal)
	return (x*m.x + y*m.y + z*m.z) / (m.x + m.y + m.z)
}

// Source: https://www.shadertoy.com/view/4sKcWt
func voxel(p vec3) vec4 {
	if !insideWorldBox(p) {
		return vec4(0)
	}

	voxel := floor(p)
	uv := (voxel.xz + MapSize.xz/2) / (MapSize.xz)
	uv.y = 1 - uv.y
	origin, size := imageSrcRegionOnTexture()
	data := imageSrc0UnsafeAt(uv*size + origin)
	height := data.r
	height = floor(height*MapSize.y + 0.5)
	hl := 1. - step(height, voxel.y)

	return vec4(data.rgb, hl)
}

func sdBox(p, b vec3) float {
	q := abs(p) - b
	return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0)
}

// https://iquilezles.org/articles/boxfunctions
// License MIT: https://www.shadertoy.com/view/ld23DV
func iBox(ro, rd, bb vec3) vec4 {
	m := 1. / rd
	n := m * ro
	k := abs(m) * bb
	t1 := -n - k
	t2 := -n + k

	tN := max(max(t1.x, t1.y), t1.z)
	tF := min(min(t2.x, t2.y), t2.z)

	if tN > tF || tF < 0 {
		return vec4(-1)
	}

	res := vec4(tN, step(tN, t1))

	res.yzw = (vec4(-sign(rd)*res.yzw, 0)).xyz

	return res
}

func sdSeg(p, a, b vec2) float {
	ba := b - a
	pa := p - a
	h := clamp(dot(pa, ba)/dot(ba, ba), 0, 1)

	return length(pa - h*ba)
}

func sdBox2D(p, b vec2) float {
	d := abs(p) - b

	return length(max(d, 0)) + min(max(d.x, d.y), 0)
}

func sdCircle(p vec2, r float) float {
	return length(p) - r
}

func sdChar(p vec2, front, run, walk, idle, jump float) vec4 {
	// State animations
	clrc := 1. - step(front, 0.)*0.5
	movement := run + walk*0.5
	tmovement := run*12 + walk*6
	offy := (0.05 - sin(Time*4)*0.05) * idle
	offy += (0.05 - sin(Time*tmovement)*0.05) * movement
	jumpoffy := jump * 0.35
	p.y += offy

	// Eyes blinking
	blink := mod(Time*12, 28)
	blink = 0.85 * step(blink, 2) * (1 + sin(blink*Pi/2))
	// Eyes
	d := sdCircle((p+vec2(-0.075, 0.4))/vec2(1, 2-blink), 0.1)
	d = min(d, sdCircle((p+vec2(-0.325, 0.4))/vec2(1, 2-blink), 0.1))
	d *= step(0, front)
	if d < 0 {
		return vec4(vec3(0), d)
	}
	// Head
	d = sdBox2D(p+vec2(0, 0.45), vec2(0.2, 0.1)) - 0.25
	if d < 0 {
		return vec4(vec3(1)*clrc*abs(d*4), d)
	}

	const stickWidth = 0.05
	llo := sin(Time*tmovement) * 0.15 * movement
	rlo := sin(Pi/2+Time*tmovement) * 0.15 * movement

	// Body trunc
	d = sdSeg(p, vec2(0, -0.45), vec2(0, 0.35)) - stickWidth
	// Arms
	// Left
	d = min(d, sdSeg(p, vec2(0), vec2(-0.2, 0.15))-stickWidth)
	d = min(d, sdSeg(p, vec2(-0.2, 0.15), vec2(-0.25, 0.3+rlo*0.5-jumpoffy))-stickWidth)
	// Right
	d = min(d, sdSeg(p, vec2(0, 0), vec2(0.2, 0.15))-stickWidth)
	d = min(d, sdSeg(p, vec2(0.2, 0.15), vec2(0.25, 0.3+llo*0.5-jumpoffy))-stickWidth)
	// Legs
	// Left
	d = min(d, sdSeg(p, vec2(0, 0.35), vec2((-0.2+llo), 0.6+llo-jumpoffy))-stickWidth)
	d = min(d, sdSeg(p, vec2((-0.2+llo), 0.6+llo-jumpoffy), vec2((-0.25+llo), 0.9+llo*0.5-jumpoffy+offy))-stickWidth)
	// Right
	d = min(d, sdSeg(p, vec2(0, 0.35), vec2((0.2-rlo), 0.6+rlo-jumpoffy))-stickWidth)
	d = min(d, sdSeg(p, vec2((0.2-rlo), 0.6+rlo-jumpoffy), vec2((0.25-rlo), 0.9+rlo*0.5-jumpoffy+offy))-stickWidth)
	if d < 0 {
		return vec4(vec3(1)*clrc*abs(d*8), d)
	}

	return vec4(0)
}

func phong(rd, ldir, normal, clr, amb, specular vec3, glossiness float) vec3 {
	// ambient
	ambientStrength := 0.5
	ambient := ambientStrength * amb

	// diffuse
	diffuse := clr

	// specular
	/*hwdir := normalize(ldir + normal)
	specular = specular * pow(max(dot(normal, hwdir), 0.), glossiness)*/
	// specular
	dotRV := dot(reflect(ldir, normal), -rd)
	//hway := normalize(-rd + ldir)
	//dotRV = dot(hway, normal)
	//dotRV = max(dotRV, 0)
	//specular = specular * pow(dotRV, glossiness) * 256.
	specular = specular * pow(dotRV, 64) //* 0.5
	specular = clamp(specular, 0, 1)     //*0.0
	//specular = clamp(specular, 0, 1)

	return ambient + diffuse + specular
}

func rayMarch(ro, rd vec3, ms float) (vec4, vec4) {
	const (
		MaxSteps = 1024.
	)

	maxi := max(MapSize.x, MapSize.y) * 3.
	maxi = min(maxi, ms)
	p := floor(ro)
	ri := 1. / rd
	rs := sign(rd)
	dis := (p - ro + 0.5 + rs*0.5) * ri
	res := -1.
	mm := vec3(0)
	vox := vec4(0)
	for i := 0.; i < MaxSteps; i++ {
		// If outside world bounding box
		if !insideWorldBox(p / 4) { // TODO: fix this
			break
		}

		vox = voxel(p)
		if vox.w > 0.5 || i > maxi {
			res = 1.
			break
		}

		mm = step(dis.xyz, dis.yzx) * step(dis.xyz, dis.zxy)
		dis += (mm * rs * ri)
		p += (mm * rs)
	}
	// Cube intersection
	mini := (p - ro + 0.5 - 0.5005*vec3(rs)) * ri
	t := max(mini.x, max(mini.y, mini.z))
	t = abs(t) * res

	return vec4(t, -mm*rs), vox
}

func shadow(ro, rd, normal vec3) float {
	res, _ := rayMarch(ro, rd, 2)
	if res.x > 0 {
		d := min(res.x, 1)
		d = d * d * (3 - 2*d)
		sd := max(dot(normal, rd), 0)
		sd *= (0.975 + hash(ro.xz, 1)*0.025) // Little dithering to remove banding
		sd = sd * sd * (3 - 2*sd)
		return d * sd
	}

	return 1
}

var Time float
var Offset vec3
var HorizontalAngle float
var MapSize vec3
var Zoom float
var AmbientColors [6]vec3

var PlayerAngle float
var PlayerIdle float
var PlayerWalking float
var PlayerRunning float
var PlayerJumping float
var AgentAngle float
var AgentPosition vec3
var AgentIdle float
var AgentWalking float
var AgentRunning float
var AgentJumping float

var LightsOff float

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	const ratio = 16. / 9.

	origin, size := imageSrcRegionOnTexture()
	uv := (texCoord-origin)/size*2 - 1
	uv *= (MapSize.xz)
	uv /= Zoom
	uv.y /= ratio
	// Hack: 0 and Pi angle glitching
	ha := noZeroSign(HorizontalAngle) * min(max(abs(HorizontalAngle), 0.001), TwoPi-0.001)
	// Note: need to revert offset z, idk why
	off := Offset.xyz * vec3(1, 1, -1)
	off.z += 1                // :)
	aoff := AgentPosition.xyz //* vec3(1, 1, -1)
	aoff.z += 1               // ??
	// Ray origin
	ro := vec3(uv.x, MapSize.y, uv.y+MapSize.y)
	ro.xz = rotate2D(ha) * ro.xz
	ro += off
	// Ray direction
	rd := normalize(vec3(0, -1, -1))
	rd.xz = rotate2D(ha) * rd.xz
	// Close the gap with the world bounding box
	wb := MapSize * vec3(0.501, 1.001, 0.501)
	boxoff := vec3(0, -MapSize.y, -1)
	dbox := sdBox(ro+boxoff, wb)
	ro += rd * -dbox
	// Distance calculation
	res, vox := rayMarch(ro, rd, 1024)
	d, normal := res.x, res.yzw
	p := ro + rd*d
	// Player character
	if ddp := iBox(ro-off, rd, vec3(0.5, 0.5, 0.01)); ddp.x > 0 {
		pos := (ro - off) + rd*ddp.x
		tuv := pos.xyz * vec3(2, -2, 2)
		norm := ddp.yzw
		back := 0.
		if norm.z < 0. {
			back = 1 // TODO:
		}
		player := (1 - back) * sdChar(tuv.xy, 1., PlayerRunning, PlayerWalking, PlayerIdle, PlayerJumping)
		player += back * sdChar(tuv.xy, -1., PlayerRunning, PlayerWalking, PlayerIdle, PlayerJumping)
		if d < ddp.x {
			player.rgb *= 0.1
		}
		if player.w < 0 {
			//p = ro +rd*ddp.x // TODO: Camouflage
			return vec4(player.rgb, 1)
		}
	}
	// Agent character
	if ddp := iBox(ro-aoff, rd, vec3(0.5, 0.5, 0.01)); ddp.x > 0 {
		pos := (ro - aoff) + rd*ddp.x
		tuv := pos.xyz * vec3(2, -2, 2)
		norm := ddp.yzw
		back := 0.
		if norm.z < 0. {
			back = 1 // TODO:
		}
		agent := (1 - back) * sdChar(tuv.xy, 1., AgentRunning, AgentWalking, AgentIdle, AgentJumping)
		agent += back * sdChar(tuv.xy, -1., AgentRunning, AgentWalking, AgentIdle, AgentJumping)
		// Do not display anything if hidden
		if d >= ddp.x && agent.w < 0 {
			//p = ro +rd*ddp.x // TODO: Camouflage
			return vec4(agent.rgb, 1)
		}
	}
	// If still outside world box
	if sdBox(p+boxoff, wb) > 0 || d < 0 {
		// TODO: Star field?
		discard()
		return
	}
	// Texture color calculation TODO: tbd
	diffuse := texture(p, normal, vox.yz) // vec3(0.5, 0, 1) //
	//return vec4(diffuse, 1.)              // TODO: texture debug
	specular := vec3(1)
	glossiness := 16.
	// Lights calculation
	rot := rotate2D(Time * 0.5)
	lights := [6]vec3{
		vec3(0, 0.5, 0).xyz * MapSize,
		vec3(rot*vec2(-0.5, 0.5), 0.6).xzy * MapSize,
		vec3(rot*vec2(0.5, -0.5), 0.6).xzy * MapSize,
		vec3(rot*vec2(-0.5, -0.5), 0.6).xzy * MapSize,
		vec3(rot*vec2(0.5, 0.5), 0.6).xzy * MapSize,
		off,
	}
	clr := vec3(LightsOff)
	for i := 0; i < 6; i++ {
		const intensity = 1. / 6.

		lightpos := lights[i] //vec3(0, 1.1, 0) * MapSize
		lightdir := normalize(lightpos - p)
		//return vec4(abs(lightdir), 1.)
		tclr := phong(
			rd, lightdir, normal.xyz, diffuse, AmbientColors[i], specular, glossiness,
		) * intensity
		// Shadows
		tclr *= clamp(shadow(p, lightdir, normal), MinShadow, 1)
		if LightsOff > 0 {
			clr = min(clr, tclr) // TODO: turning lights off ability
		} else {
			clr += tclr
		}
	}

	return vec4(clr, 1)
}
